/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { EnumPreferencesAgeRange } from "./EnumPreferencesAgeRange";
import {
  IsEnum,
  IsOptional,
  ValidateNested,
  IsDate,
  IsString,
} from "class-validator";
import { Community } from "../../community/base/Community";
import { Type } from "class-transformer";
import { EnumPreferencesGenderPreference } from "./EnumPreferencesGenderPreference";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";
import { UserProfile } from "../../userProfile/base/UserProfile";

@ObjectType()
class Preferences {
  @ApiProperty({
    required: false,
    enum: EnumPreferencesAgeRange,
  })
  @IsEnum(EnumPreferencesAgeRange)
  @IsOptional()
  @Field(() => EnumPreferencesAgeRange, {
    nullable: true,
  })
  ageRange?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: () => Community,
  })
  @ValidateNested()
  @Type(() => Community)
  @IsOptional()
  community?: Community | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    enum: EnumPreferencesGenderPreference,
  })
  @IsEnum(EnumPreferencesGenderPreference)
  @IsOptional()
  @Field(() => EnumPreferencesGenderPreference, {
    nullable: true,
  })
  genderPreference?: "Option1" | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  otherPreferences!: JsonValue;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [UserProfile],
  })
  @ValidateNested()
  @Type(() => UserProfile)
  @IsOptional()
  userProfiles?: Array<UserProfile>;
}

export { Preferences as Preferences };
